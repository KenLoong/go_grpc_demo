// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: Model.proto

package services

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProModelMultiError, or nil
// if none found.
func (m *ProModel) ValidateAll() error {
	return m.validate(true)
}

func (m *ProModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProdId

	// no validation rules for ProdName

	// no validation rules for ProdPrice

	if len(errors) > 0 {
		return ProModelMultiError(errors)
	}
	return nil
}

// ProModelMultiError is an error wrapping multiple validation errors returned
// by ProModel.ValidateAll() if the designated constraints aren't met.
type ProModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProModelMultiError) AllErrors() []error { return m }

// ProModelValidationError is the validation error returned by
// ProModel.Validate if the designated constraints aren't met.
type ProModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProModelValidationError) ErrorName() string { return "ProModelValidationError" }

// Error satisfies the builtin error interface
func (e ProModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProModelValidationError{}

// Validate checks the field values on OrderMain with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderMain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderMain with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderMainMultiError, or nil
// if none found.
func (m *OrderMain) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderMain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for OrderNo

	// no validation rules for UserId

	if m.GetOrderMoney() <= 1 {
		err := OrderMainValidationError{
			field:  "OrderMoney",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOrderTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderMainValidationError{
					field:  "OrderTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderMainValidationError{
					field:  "OrderTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderMainValidationError{
				field:  "OrderTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOrderDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderMainValidationError{
						field:  fmt.Sprintf("OrderDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderMainValidationError{
						field:  fmt.Sprintf("OrderDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderMainValidationError{
					field:  fmt.Sprintf("OrderDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderMainMultiError(errors)
	}
	return nil
}

// OrderMainMultiError is an error wrapping multiple validation errors returned
// by OrderMain.ValidateAll() if the designated constraints aren't met.
type OrderMainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMainMultiError) AllErrors() []error { return m }

// OrderMainValidationError is the validation error returned by
// OrderMain.Validate if the designated constraints aren't met.
type OrderMainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderMainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderMainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderMainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderMainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderMainValidationError) ErrorName() string { return "OrderMainValidationError" }

// Error satisfies the builtin error interface
func (e OrderMainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderMain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderMainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderMainValidationError{}

// Validate checks the field values on OrderDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderDetailMultiError, or
// nil if none found.
func (m *OrderDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DetailId

	// no validation rules for OrderNo

	// no validation rules for ProdId

	// no validation rules for ProdPrice

	// no validation rules for ProdNum

	if len(errors) > 0 {
		return OrderDetailMultiError(errors)
	}
	return nil
}

// OrderDetailMultiError is an error wrapping multiple validation errors
// returned by OrderDetail.ValidateAll() if the designated constraints aren't met.
type OrderDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderDetailMultiError) AllErrors() []error { return m }

// OrderDetailValidationError is the validation error returned by
// OrderDetail.Validate if the designated constraints aren't met.
type OrderDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderDetailValidationError) ErrorName() string { return "OrderDetailValidationError" }

// Error satisfies the builtin error interface
func (e OrderDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderDetailValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserScore

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}
	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}
